{"version":3,"sources":["Tictactoe.js","App.js","serviceWorker.js","index.js"],"names":["Tictactoe","props","check","event","instancelist","state","list","count","value","document","getElementById","target","id","innerHTML","setState","turn","X","console","log","calculateWinner","O","Array","fill","clicks","squares","lines","this","i","length","a","b","c","winner","restart","values","style","display","window","location","reload","className","onClick","src","Component","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02dac00d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Tictactoe extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            X:'X',\n            O:'O',\n            list:Array(9).fill(null),\n            count:0,\n            turn:'X',\n            clicks:0\n        }\n    }\n\n    check = (event) =>{\n        var instancelist=this.state.list;\n        if(this.state.count===0){\n            var value = document.getElementById(event.target.id).innerHTML\n            this.setState({turn:'X'})\n            if(value ==''){\n                document.getElementById(event.target.id).innerHTML=this.state.X;\n                instancelist[event.target.id]=this.state.X;\n                console.log(instancelist)\n                this.setState({\n                    count:1,\n                    list:instancelist\n\n                },()=>{this.calculateWinner(instancelist);this.setState({turn:'O'})})\n            }\n        }\n        else if(this.state.count==1){\n            var value = document.getElementById(event.target.id).innerHTML\n            console.log(value)\n            if(value ==''){\n            document.getElementById(event.target.id).innerHTML=this.state.O;\n            instancelist[event.target.id]=this.state.O;\n            console.log(instancelist)\n            this.setState({\n                count:0,\n                list:instancelist\n            },()=>{this.calculateWinner(instancelist);this.setState({turn:'X'})})\n        }\n    }\n}\n\n calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    this.setState({clicks:this.state.clicks+1})\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b,c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return (this.winner(squares[a]));\n      }\n      \n      else if(this.state.clicks===8){\n          return this.restart()\n      }\n    }\n    return null;\n  }\n\n  winner(values){    \n     document.getElementById('winner').style.display='block';\n     document.getElementById('winnerAnnocement').innerHTML='Player '+values+' is '\n    document.getElementById('tictoe').style.display='none'\n  }\n  restart(){\n    window.location.reload()\n  }\n\n    render(){\n        return(\n            <center><div className=\"mainDiv\">\n                <div id=\"winner\">\n                    <button id=\"restart\" onClick={this.restart}>Restart</button>\n                    <h1 id=\"winnerAnnocement\"></h1>\n                    <img src=\"http://www.hostaccommodation.co.nz/assets/Uploads/_resampled/ScaleWidthWyI5ODAiXQ/winner6.jpg\"></img>\n                </div>\n                <div id=\"tictoe\">\n                    <h1>Enjoy The Game</h1>\n                    <table>\n                        <tr>\n                    <td><button className=\"btn\" id=\"0\" onClick={this.check}></button></td>\n                    <td><button className=\"btn\" id=\"1\" onClick={this.check}></button></td>\n                    <td><button className=\"btn\" id=\"2\" onClick={this.check}></button></td></tr>\n\n\n                    <tr>\n                    <td><button className=\"btn\" id=\"3\" onClick={this.check}></button></td>\n                    <td><button className=\"btn\" id=\"4\" onClick={this.check}></button>\n                    </td><td><button className=\"btn\" id=\"5\" onClick={this.check}></button></td></tr>\n\n                    <tr>\n                    <td><button className=\"btn\" id=\"6\" onClick={this.check}></button></td>\n                    <td><button className=\"btn\" id=\"7\" onClick={this.check}></button></td>\n                    <td><button className=\"btn\" id=\"8\" onClick={this.check}></button></td></tr>\n                    </table>\n                    <h1>Turn {this.state.turn}</h1>\n                </div>\n            </div></center>\n        )\n    }\n}\n\nexport default Tictactoe;","import React from 'react';\nimport './App.css';\nimport Tictactoe from './Tictactoe'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Tictactoe />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}